<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on Kubermates</title><link>https://kubermates.org/tags/github/</link><description>Recent content in Github on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 18 Jul 2025 08:41:53 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>🧩 GitHub Actions Composite vs Reusable Workflows</title><link>https://kubermates.org/blog/github-actions-composite-vs-reusable-workflows-4bih/</link><pubDate>Fri, 18 Jul 2025 08:41:53 +0000</pubDate><guid>https://kubermates.org/blog/github-actions-composite-vs-reusable-workflows-4bih/</guid><description>&lt;h2 id="how-to-standardize-and-supercharge-your-cicd-pipelines-across-projects">How to standardize and supercharge your CI/CD pipelines across projects&lt;/h2>
&lt;p>When your teams manage multiple projects with similar deployment patterns, repeating the same GitHub Actions steps over and over can become tedious, error-prone, and hard to maintain&lt;/p>
&lt;p>Thankfully, GitHub Actions offers two powerful solutions to help &lt;strong>standardize, reuse, and scale your CI/CD pipelines&lt;/strong>: &lt;strong>Composite Actions&lt;/strong> and &lt;strong>Reusable Workflows&lt;/strong>. When used together, they form a clean, modular, and DRY (don’t repeat yourself) CI/CD strategy&lt;/p></description></item><item><title>Ensuring Effective Helm Charts with Linting, Testing, and Diff Checks 🚀</title><link>https://kubermates.org/blog/ensuring-effective-helm-charts-with-linting-testing-and-diff-checks-ni0/</link><pubDate>Tue, 01 Oct 2024 16:25:51 +0000</pubDate><guid>https://kubermates.org/blog/ensuring-effective-helm-charts-with-linting-testing-and-diff-checks-ni0/</guid><description>&lt;p>When deploying applications to Kubernetes, using Helm charts is a great way to simplify the process. But how do you make sure your Helm charts are high-quality and won’t cause issues down the line? Don’t worry! In this guide, we’ll show you how to:&lt;/p>
&lt;ul>
&lt;li>Use &lt;strong>Helm Chart-Testing&lt;/strong> for linting and validation 🕵️‍♀️&lt;/li>
&lt;li>Perform &lt;strong>Unit Testing&lt;/strong> with the Helm Unit Test plugin 🔧&lt;/li>
&lt;li>Use &lt;strong>Helm Diff&lt;/strong> to check changes before installing or upgrading 🚦&lt;/li>
&lt;/ul>
&lt;p>By following these steps, you’ll catch potential issues early and ensure smooth deployments. We’ll also build a fully tested &lt;strong>NGINX Helm chart&lt;/strong> at the end!&lt;/p></description></item></channel></rss>